@model Thinktecture.AuthorizationServer.Models.ValidatedRequest

@{
    ViewBag.Title = "Authorize";
    ViewBag.PageClass = "page-authorize page-authorize-consent";
}

<div class="row" id="consent">
    <div class="span6 offset1">
        <p class="lead">
            <strong>@Model.Client.Name</strong> want to access <strong>@Model.Application.Name</strong> on your behalf.
        </p>
        <p>Select the permissions that you want to allow:</p>
        
        @if (!this.ViewData.ModelState.IsValid)
        {
            var errors =
                from item in this.ViewData.ModelState.Values
                from e in item.Errors
                select e.ErrorMessage;
            <div class="alert alert-warning">
                <ul class="unstyled">
                    @foreach (var err in errors)
                    {
                        <li>@err</li>
                    }
                </ul>
            </div>
        }

        @using (Html.BeginForm())
        {
             @Html.AntiForgeryToken()
            <dl>
                @foreach (var scope in @Model.Scopes.OrderByDescending(x=>x.Emphasize))
                {
                    <dt class="checkbox">
                        <label>
                            @helper GetCheckedForScope(string val)
                            {
                                var scopes = Request["scopes"];
                                if ((String.IsNullOrWhiteSpace(scopes) && Request.HttpMethod=="GET") ||
                                    (scopes != null && scopes.Contains(val))) 
                                {
                                    @: checked
                                }
                            }
                            <input type="checkbox" name="scopes" value="@scope.Name" @GetCheckedForScope(@scope.Name) />
                            <strong>@scope.DisplayName</strong>
                        @if (scope.Emphasize)
                        {
                            <i class="icon-exclamation-sign"></i>
                        }
                        </label>
                    </dt>
                    <dd>@scope.Description</dd>
                }
            </dl>
            
            if (Model.RequestingRefreshToken)
            {
                <div>
                    <strong>Offline Use</strong>
                    <i class="icon-exclamation-sign"></i>
                </div>
                <p>These permissions will be allowed while you are offline.</p>
                
                <div>
                    <label for="rememberDuration">Allow offline use for:</label>
                    <select id="rememberDuration" name="rememberDuration">
                        @foreach (var option in @Model.RememberOptions)
                        {
                            <option value="@option.Value" selected="@option.Value.Equals(Convert.ToInt32(Request["rememberDuration"]))">@option.OptionLabel</option>
                        }
                    </select>
                </div>
            }
            else if (Model.ShowRememberConsent)
            {
                <div class="checkbox">
                    <label>
                        <input type="checkbox" name="rememberDuration" value="-1" checked="@Request["rememberDuration"]" />
                        Remember decision
                    </label>
                </div>
            }
            
            <div class="buttons">           
                <button class="btn btn-primary" name="button" value="yes">Allow</button>
                <button class="btn" name="button" value="no">Deny</button>
            </div>
        }
    </div>
    @if(!Request.UserAgent.Contains("MSAuthHost"))
    {
    <div class="span4 offset1" id="appInfo">
        <div class="hero-unit">
            <h3>@Model.Application.Name</h3>
            <p>@Model.Application.Description</p>
            @if(!String.IsNullOrWhiteSpace(Model.Application.LogoUrl))
            {
                <p class="span2"><img src="@Model.Application.LogoUrl" /></p>
            }
            <div class="clearfix"></div>
        </div>
    </div>
    }
</div>
